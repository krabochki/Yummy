/* eslint-disable @typescript-eslint/no-explicit-any */
import { trigger } from '@angular/animations';
import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  OnDestroy,
  OnInit,
} from '@angular/core';
import { Title } from '@angular/platform-browser';
import { ActivatedRoute, Router } from '@angular/router';
import { IUser, nullUser } from 'src/app/modules/user-pages/models/users';
import { UserService } from 'src/app/modules/user-pages/services/user.service';
import { loginMask, passMask, usernameMask } from 'src/tools/regex';
import { AuthService } from '../../services/auth.service';
import { modal } from 'src/tools/animations';
import { customPatternValidator, policyValidator } from 'src/tools/validators';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { EMPTY, Subject, catchError, finalize, tap } from 'rxjs';
import { getCurrentDate } from 'src/tools/common';
import { NotificationService } from 'src/app/modules/user-pages/services/notification.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['../../common-styles.scss'],
  animations: [trigger('modal', modal())],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class RegisterComponent implements OnInit, OnDestroy {
  form: FormGroup;
  failText = '';
  confirmModal: boolean = false;
  successModal: boolean = false;
  loadingModal: boolean = false;
  errorModal: boolean = false;

  destroyed$: Subject<void> = new Subject<void>();

  get passwordNotValidError(): string {
    return this.form.get('password')?.invalid &&
      (this.form.get('password')?.dirty || this.form.get('password')?.touched)
      ? '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 8 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∫ –º–∏–Ω–∏–º—É–º: –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞, –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –∏ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞'
      : '';
  }

  get emailNotValidError(): string {
    return !this.form.get('email')?.hasError('emailExists')
      ? this.form.get('email')?.invalid &&
        (this.form.get('email')?.dirty || this.form.get('email')?.touched)
        ? '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã'
        : ''
      : ' ';
  }
  get usernameNotValidError(): string {
    return !this.form.get('username')?.hasError('usernameExists')
      ? this.form.get('username')?.invalid &&
        (this.form.get('username')?.dirty || this.form.get('username')?.touched)
        ? '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞), —Ü–∏—Ñ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –Ω–∏–∂–Ω–∏–µ –ø–æ—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç–æ—á–∫–∏ (–Ω–µ –ø–æ–¥—Ä—è–¥)'
        : ''
      : ' ';
  }

  constructor(
    private cd: ChangeDetectorRef,
    private authService: AuthService,
    private notifyService: NotificationService,
    private titleService: Title,
    private router: Router,
    private route: ActivatedRoute,
    private usersService: UserService,
    private fb: FormBuilder,
  ) {
    this.titleService.setTitle('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    this.form = this.fb.group({});
    this.codeForm = this.fb.group({});
  }

  userId: number = 0;

  confirmCode() {
    this.loadingModal = true;
    this.authService
      .verifyUser(this.userId, this.codeForm.value.code)
      .pipe(
        catchError((e) => {
          this.failText = e.error.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          this.errorModal = true;
          return EMPTY;
        }),
        tap(() => {
          if (this.form.value.password && this.form.value.username)
            this.loginUser();
          else this.noFormModal = true;
        }),
        finalize(() => {
          this.loadingModal = false;
          this.cd.markForCheck();
        }),
      )
      .subscribe();
  }

  loginUser() {
    if (this.form.valid) {
      const loginUser: IUser = {
        ...nullUser,
        username: this.form.value.username,
        password: this.form.value.password,
      };

      this.loadingModal = true;

      this.authService
        .loginUser(loginUser)
        .pipe(
          tap(() => {
            this.authService
              .getTokenUser()
              .pipe(
                tap((user: IUser) => {
                  this.authService.setCurrentUser(user);
                  this.router.navigateByUrl('/welcome');
                  this.cd.markForCheck();
                }),
                catchError((e) => {
                  this.failText =
                    e.error.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                  this.errorModal = true;
                  return EMPTY;
                }),
                finalize(() => {
                  this.loadingModal = false;
                  this.cd.markForCheck();
                }),
              )
              .subscribe();
          }),
          catchError((e) => {
            this.failText = e.error.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            this.errorModal = true;
            this.loadingModal = false;
            this.cd.markForCheck();

            return EMPTY;
          }),
        )
        .subscribe();
    }
  }

  codeForm: FormGroup;
  ngOnInit(): void {
    this.route.queryParams.subscribe((params) => {
      const siteToken = params['siteToken'];

      if (siteToken) {
        this.loadingModal = true;
        this.authService
          .getUserIdBySiteToken(siteToken)
          .pipe(
            finalize(() => {
              this.loadingModal = false;
              this.cd.markForCheck();
            }),
            catchError((e) => {
              this.failText = e.error.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
              this.errorModal = true;

              const currentUrl = window.location.href;
              const updatedUrl = currentUrl.split('?')[0]; // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              window.history.replaceState({}, '', updatedUrl);
              return EMPTY;
            }),
          )
          .subscribe((res: any) => {
            this.userId = res.id;
            this.switch();
          });
      }
    });


    this.codeForm = this.fb.group({
      code: [
        '',
        [Validators.required, Validators.maxLength(6), Validators.minLength(6)],
      ],
    });

    this.form = this.fb.group({
      policy: [false, [policyValidator]],
      email: [
        '',
        [
          Validators.required,
          Validators.minLength(5),
          Validators.maxLength(64),
          customPatternValidator(loginMask),
        ],
      ],
      username: [
        '',
        [
          Validators.required,
          Validators.minLength(4),
          Validators.maxLength(20),
          customPatternValidator(usernameMask),
        ],
      ],
      password: [
        '',
        [
          Validators.required,
          Validators.minLength(8),
          Validators.maxLength(20),
          customPatternValidator(passMask),
        ],
      ],
    });
  }

  switch() {
    this.codeMode = true;
  }

  codeMode = false;
noFormModal=false
  handleNoFormModal() {
    this.router.navigateByUrl('/login')
  }
  registration() {
    if (this.form.valid) {
      this.loadingModal = true;
      this.cd.markForCheck();

      const newUser: IUser = {
        ...nullUser,
        username: this.form.value.username.toLowerCase(),
        email: this.form.value.email,
        password: this.form.value.password,
        registrationDate: getCurrentDate(),
      };

      this.authService
        .postUser(newUser)
        .pipe(
          tap((res: any) => {
            this.userId = res.id;

            const siteToken = res.siteToken;
            const currentUrl = window.location.href;
            const updatedUrl =
              currentUrl +
              (currentUrl.includes('?') ? '&' : '?') +
              'siteToken=' +
              encodeURIComponent(siteToken);
            window.history.replaceState({}, '', updatedUrl);

            this.switch();

            this.successModal = true;
            this.sendNotifyToBornedUser(newUser.username, this.userId);
          }),
          catchError((e) => {
            this.failText = e.error.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            this.errorModal = true;
            return EMPTY;
          }),
          finalize(() => {
            this.loadingModal = false;
            this.cd.markForCheck();
          }),
        )
        .subscribe();
    }
  }

  handleConfirmModal(result: boolean): void {
    if (result) {
      this.registration();
    }
    this.confirmModal = false;
  }

  handleSuccessModal() {
    this.successModal = false;
  }

  sendNotifyToBornedUser(username: string, userId: number) {
    const notify = this.notifyService.buildNotification(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yummy, @${username} üçæ! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ª–∏–Ω–∞—Ä–æ–≤. –£–¥–∞—á–∏!`,
      'success',
      'born',
      '',
    );
    this.notifyService.sendNotification(notify, userId).subscribe();
  }

 

  ngOnDestroy(): void {
    this.destroyed$.next();
    this.destroyed$.complete();
  }
}
